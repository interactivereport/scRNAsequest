[["index.html", "scRNASequest: an ecosystem of scRNA-seq analysis, visualization and publishing Chapter 1 Preface", " scRNASequest: an ecosystem of scRNA-seq analysis, visualization and publishing Kejie Li Biogen kejie.li@biogen.com Yu (Henry) Sun Biogen yuhenry.sun@biogen.com Zhengyu Ouyang BioInfoRx oyoung@bioinforx.com Soumya Negi Biogen soumya.negi@biogen.com Wanli Wang Biogen wanli.wang@biogen.com Yirui Chen Biogen yirui.chen@biogen.com Sarbottam Piya Biogen sarbottam.piya@biogen.com Wenxing Hu Biogen wenxing.hu@biogen.com Maria Zavodszky Biogen maria.zavodszky@biogen.com Hima Yalamanchili Biogen hima.yalamanchili@biogen.com Shaolong Cao Biogen shaolong.cao@biogen.com Andrew Gehrke Biogen andrew.gehrke@biogen.com Mark Sheehan Biogen make.sheehan@biogen.com Dann Huh Biogen dann.huh@biogen.com Fergal Casey Biogen fergal.casey@biogen.com Baohong Zhang (Corresponding Author) Biogen baohong.zhang@biogen.com These authors contribute equally Kejie Li, Yu (Henry) Sun, Zhengyu Ouyang 2022-10-11 Chapter 1 Preface This is a user manual written using Bookdown, which provides a detailed guide for scRNASequest. "],["introduction.html", "Chapter 2 Introduction", " Chapter 2 Introduction scRNASequest is a semi-automated single-cell RNA-seq (scRNA-seq) data analysis workflow which allows the following five different functionalities: Pre-processing from raw single-cell RNA sequencing data, Batch correction by one or multiple harmonization methods, Reference-dataset-based cell type label transfer and embedding projection, Multi-sample multi-condition single-cell level differential gene expression analysis Seamless integration with cellxgene VIP for visualization and with CellDepot for data hosting and sharing by generating a compatible h5ad file. Users have the option to run it on a local laptop computer or interact with sge/slurm schedulers on high performance computing (HPC) clusters. This pipeline contains two main programs: scAnalyzer This is the main script in scRNASequest for single-cell data processing and analysis. Also, scAnalyzer is an all-in-one program for downstream data analysis, including pre-processing, batch correction, label transfer, differential gene expression analysis and CellDepot integration. Moreover, scAnalyzer is embedded with a Bookdown report generator, named scReport, which can produce a user-friendly, well-structured quality control report after each run. scRef scRef generates a reference dataset for label transfer. For each reference dataset, this program only needs to run once, and the reference h5ad file will be placed in a permanent path. "],["installation.html", "Chapter 3 Installation 3.1 Install scRNASequest 3.2 Configure sys.yml file 3.3 Install cellxgene_VIP 3.4 Install CellDepot", " Chapter 3 Installation 3.1 Install scRNASequest First, we install the scRNASequest by downloading the scripts from GitHub: git clone https://github.com/interactivereport/scRNAsequest.git cd scRNAsequest #Install scRNAsequest conda environment and R packages #Please make sure you have conda installed before, and this step may take a while (30min ~1 hour) bash install #Activate the conda environment conda activate scRNAsequest #Also, .env will be created under the src directory: ls ~/scRNAsequest/src/.env #Check the path of current directory and add it to $PATH: CurrentDir=`pwd` export PATH=&quot;$CurrentDir:$PATH&quot; #However, the above command only adds the scRNAsequest directory to $PATH temporarily #To add it to the environment permanently, edit ~/.bash_profile or ~/.bashrc: vim ~/.bash_profile #Add the full path of the scRNAsequest directory to $PATH, for example, $HOME/scRNAsequest PATH=$PATH:$HOME/RNAsequest #Source the file source ~/.bash_profile If the installation is successful, scAnalyzer and scRef should be able to run without passing any parameters: $ scAnalyzer ***** 2022-06-23 17:40:17 ***** ########### ## scRNAsequest: https://github.com/interactivereport/scRNAsequest.git ## Pipeline Path: /camhpc/ngs/tools/scRNAsequest ## Pipeline Date: 2022-06-23 15:00:23 -0400 ## git HEAD: 61d9e676d31849ccc8ac8a3442704128504be248 ########### scAnalyzer /path/to/a/DNAnexus/download/folder === or === scAnalyzer /path/to/a/config/file The config file will be generated automatically when a DNAnexus download folder is provided Available reference data: human_cortex: more information @ https://azimuth.hubmapconsortium.org/references/ human_fetal: more information @ https://azimuth.hubmapconsortium.org/references/ human_pbmc: more information @ https://azimuth.hubmapconsortium.org/references/ mouse_thalamus: more information @ http://omicsoft01.hpc.biogen.com/celldepot/app/core/app_project_review.php?ID=301 mouse_cortex: more information @ https://azimuth.hubmapconsortium.org/references/ mouse_spinalCord: more information @ http://omicsoft01.hpc.biogen.com/celldepot/app/core/app_project_review.php?ID=285 mouse_telencephalon_diencephalon: more information @ https://www.ebi.ac.uk/arrayexpress/experiments/E-MTAB-11115/ NHP_Substantia_nigra: more information @ search NHP_Substantia_nigra in celldepot @ http://omicsoft01.hpc.biogen.com/celldepot NHP_Cerebellum: more information @ search NHP_Cerebellum in celldepot @ http://omicsoft01.hpc.biogen.com/celldepot If one of the above can be used as a reference for your datasets, please update the config file with the name in &#39;ref_name&#39;. Powered by the Research Data Sciences Group [zhengyu.ouyang@biogen.com;kejie.li@biogen.com] ------------ Typing scRef directly without any parameters will activate the user manual page: $ scRef ***** 2022-06-23 17:38:28 ***** ########### ## scRNAsequest: https://github.com/interactivereport/scRNAsequest.git ## Pipeline Path: /camhpc/ngs/tools/scRNAsequest ## Pipeline Date: 2022-06-23 15:00:23 -0400 ## git HEAD: 61d9e676d31849ccc8ac8a3442704128504be248 ########### Loading resources scRef /path/to/a/output/folder === or === scRef /path/to/a/Ref/config/file The folder has to be existed. The Ref config file will be generated automatically when a path is provided ===== CAUTION ===== 1. This process will add a seurat reference data into the scRNAsequest pipeline PERMANENTLY! 2. Make sure the data provided for reference building is SCT transformed! Powered by the Research Data Sciences group [zhengyu.ouyang@biogen.com;kejie.li@biogen.com] ------------ 3.2 Configure sys.yml file The sys.yml file contains critical information for the pipeline. You can use this sys_example.yml file as a template to prepare your file. The file name must be sys.yml and is located under the src/ directory of the pipeline. 3.3 Install cellxgene_VIP The cellxgene_VIP platform can be used to visualize the h5ad file generated by the scRNASequest pipeline. This visualization step can be performed before the differential expression (DE) analysis to pinpoint meaningful clusters for downstream steps. Please follow the detailed instructions below to install cellxgene_VIP: https://github.com/interactivereport/cellxgene_VIP However, it is up to the user how to visualize the h5ad file, and other tools with similar functions (scanpy or Seurat) will also work. 3.4 Install CellDepot Please refer to the detailed instructions below to install CellDepot: https://celldepot.bxgenomics.com/celldepot_manual/install_environment.php The installation of CellDepot is also optional if the user only needs to analyze the data, without publishing it into the CellDepot database. "],["data-preparation.html", "Chapter 4 Data preparation 4.1 Public data in h5 format 4.2 Public data in 10X MEX format 4.3 Self-prepared files", " Chapter 4 Data preparation scRNASequest pipeline is compatible with different single-cell experiment outputs, including the 10X MEX format and the 10X h5 format from Cell Ranger. The user may need to manually separate the annotation file, so that no cell filtering was performed. In this chapter, we will walk through how to prepare the data before running the pipeline. 4.1 Public data in h5 format Here, we first present an example of the data processing steps using a public EMBL EBI dataset: E-MTAB-11115. The nine processed zip files were downloaded and unzipped. There are total 6 data, with 6 corresponding *raw_feature_bc_matrix.h5 files. These files are required by the pipeline: #h5 matrix files -rwxrwxr--. 1 zouyang ngs 165M Oct 25 2021 5705STDY8058280.raw_feature_bc_matrix.h5 -rwxrwxr--. 1 zouyang ngs 165M Oct 25 2021 5705STDY8058281.raw_feature_bc_matrix.h5 -rwxrwxr--. 1 zouyang ngs 156M Oct 25 2021 5705STDY8058282.raw_feature_bc_matrix.h5 -rwxrwxr--. 1 zouyang ngs 162M Oct 25 2021 5705STDY8058283.raw_feature_bc_matrix.h5 -rwxrwxr--. 1 zouyang ngs 149M Oct 25 2021 5705STDY8058284.raw_feature_bc_matrix.h5 -rwxrwxr--. 1 zouyang ngs 177M Oct 25 2021 5705STDY8058285.raw_feature_bc_matrix.h5 This dataset also has cell type annotation files associated with each data. These files are optional to the pipeline, but if you would like to use their cell type labels, it would be better to include them in the sample meta file (See section 5.2). #Annotation files (optional to the pipeline) -rwxrwx---. 1 zouyang ngs 440K Apr 21 16:59 5705STDY8058280.annotation.csv -rwxrwx---. 1 zouyang ngs 446K Apr 21 16:59 5705STDY8058281.annotation.csv -rwxrwx---. 1 zouyang ngs 310K Apr 21 16:59 5705STDY8058282.annotation.csv -rwxrwx---. 1 zouyang ngs 282K Apr 21 16:59 5705STDY8058283.annotation.csv -rwxrwx---. 1 zouyang ngs 157K Apr 21 16:59 5705STDY8058284.annotation.csv -rwxrwx---. 1 zouyang ngs 555K Apr 21 16:59 5705STDY8058285.annotation.csv #A brief look at the annotation file: $ head -3 5705STDY8058280_annotation.csv Cell.ID,sample,annotation_1,annotation_1_print AAACCCAAGGAAGTAG-1,5705STDY8058280,Ext_L25,23_Ext_L25 AAACCCAAGGGCAGTT-1,5705STDY8058280,Ext_L56,24_Ext_L56 If SampleName.metrics_summary.csv files are available, please also add them in the same directory as the h5 files, and the pipeline will use them to generate QC plots, but they are not required files of the pipeline. The expected file names should be: 5705STDY8058280.metrics_summary.csv 5705STDY8058281.metrics_summary.csv 5705STDY8058282.metrics_summary.csv 5705STDY8058283.metrics_summary.csv 5705STDY8058284.metrics_summary.csv 5705STDY8058285.metrics_summary.csv !!! Important Since we don’t provide the path of these metrics_summary.csv files to the pipeline, their prefix SampleName must be consistent with the Sample_Name column in the sample meta file (See section 5.2), so that the pipeline can recognize them automatically. You can certainly rename the files and the corresponding SampleName column if you would like to change the data names and how they appear in the final results. Also, for the metrics_summary.csv file names, the concatenator between the Sample_Name and “metrics_summary.csv” must be “.” so that the pipeline can read them automatically. 4.2 Public data in 10X MEX format Another popular format for single-cell RNA-seq is the MEX format, with an mtx file and associated barcodes file as well as a features file. Here, we use a public dataset from NCBI/GEO: GSE205483 to walk through the procedures for pipeline setup. There are total 4 data, and all the processed data can be downloaded from the Supplementary file section as a tarball: GSE205483_RAW.tar: #Untar the file tar -xvf GSE205483_RAW.tar $ ls -l -rw-rw-r--. 1 ysun4 ysun4 4704844 Jun 2 15:13 GSM6213399_IT_YZ_0309_2904_barcodes.tsv.gz -rw-rw-r--. 1 ysun4 ysun4 260888 Jun 2 15:13 GSM6213399_IT_YZ_0309_2904_features.tsv.gz -rw-rw-r--. 1 ysun4 ysun4 64071180 Jun 2 15:13 GSM6213399_IT_YZ_0309_2904_matrix.mtx.gz -rw-rw-r--. 1 ysun4 ysun4 5474445 Jun 2 15:21 GSM6213400_IT_YZ_0309_2905_barcodes.tsv.gz -rw-rw-r--. 1 ysun4 ysun4 260888 Jun 2 15:21 GSM6213400_IT_YZ_0309_2905_features.tsv.gz -rw-rw-r--. 1 ysun4 ysun4 73218924 Jun 2 15:21 GSM6213400_IT_YZ_0309_2905_matrix.mtx.gz -rw-rw-r--. 1 ysun4 ysun4 4931566 Jun 2 15:30 GSM6213401_IT_YZ_0309_2908_barcodes.tsv.gz -rw-rw-r--. 1 ysun4 ysun4 260888 Jun 2 15:30 GSM6213401_IT_YZ_0309_2908_features.tsv.gz -rw-rw-r--. 1 ysun4 ysun4 53887060 Jun 2 15:30 GSM6213401_IT_YZ_0309_2908_matrix.mtx.gz -rw-rw-r--. 1 ysun4 ysun4 4132528 Jun 2 15:37 GSM6213402_IT_YZ_0322_3125_barcodes.tsv.gz -rw-rw-r--. 1 ysun4 ysun4 260888 Jun 2 15:37 GSM6213402_IT_YZ_0322_3125_features.tsv.gz -rw-rw-r--. 1 ysun4 ysun4 53205493 Jun 2 15:37 GSM6213402_IT_YZ_0322_3125_matrix.mtx.gz Next, these files need to be organized into separate folders for the pipeline to read. In specific, we need to create separate folders for each data, and rename the three files to be: barcodes.tsv.gz, features.tsv.gz, and matrix.mtx.gz. The organized file hierarchy is below: GSE205483/ ├── GSM6213399_IT_YZ_0309_2904 ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── GSM6213400_IT_YZ_0309_2905 ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── GSM6213401_IT_YZ_0309_2908 ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz └── GSM6213402_IT_YZ_0322_3125 ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz 4.3 Self-prepared files If you have raw data in FASTQ format, please process them using the Cell Ranger pipeline to generate the raw_feature_bc_matrix.h5 and metrics_summary.csv files. Please visit Cell Ranger website here for more details about the outputs, in the “Output files” section. In short, Cell Ranger outputs filtered_feature_bc_matrix.h5 (cells after filtering, recommended to use), raw_feature_bc_matrix.h5 (without filtering), and two folders for MEX format output: filtered_feature_bc_matrix, raw_feature_bc_matrix. In addition, Cell Ranger also has a metrics_summary.csv file generated, which can be provided to scRNASequest. Please re-organize, and if necessary, rename the Cell Ranger output files into the following file structures before running scRNASequest. Below is the file hierarchy for h5 input files (metrics_summary.csv files are suggested to be included, but not required; If cell type classification annotation.csv files are available, it would be better to include them): Project/ ├── Data1.filtered_feature_bc_matrix.h5 ├── Data1.annotation.csv (optional) ├── Data1.metrics_summary.csv (optional) ├── Data2.filtered_feature_bc_matrix.h5 ├── Data2.annotation.csv (optional) ├── Data2.metrics_summary.csv (optional) ... The file hierarchy for MEX files: Project/ ├── Data1 ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── Data2 ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ... "],["input-configuration.html", "Chapter 5 Input configuration 5.1 Prepare the config.yml file 5.2 Prepare the sample meta file 5.3 File hierarchy", " Chapter 5 Input configuration First, make sure the .env has been created in the src folder under the pipeline directory: ls ~/scRNAsequest/src/.env 5.1 Prepare the config.yml file To run the scRNAsequest pipeline, a config.yml file is required to be filled in. Please use the following template as an example to prepare this file: config.yml ## Project info and filtering parameters prj_name: E-MTAB-11115 #required, project name prj_title: &quot;Cell2location maps fine-grained cell types in spatial transcriptomics&quot; #required, and quotes might be needed ref_name: #optional. You can choose one from scAnalyzer call without an argument output: /home/ysun4/E-MTAB-11115/ #required, output path sample_name: Sample_Name sample_meta: ~/E-MTAB-11115/sampleMeta.csv #required, sample meta information, see section 5.1 gene_group: MT: startwith: [&quot;MT-&quot;,&quot;Mt-&quot;,&quot;mt-&quot;] cutoff: 20 # percentage cutoff to filter out the cells (larger than this cutoff) rm: False # this means the genes specified &quot;startwith&quot; will be REMOVED from the downstream analysis RP: startwith: [MRPL,MRPS,RPL,RPS] cutoff: 50 rm: False filter_step: True #if False, the above &#39;gene_group&#39; filtering will be skipped as well min.cells: 3 #filtering genes by minimal cell min.features: 50 #filtering cells by minimal genes highCount.cutoff: 10000 #any cells with higher total counts to be removed highGene.cutoff: 3000 #any cells with a higher number of detected genes to be removed group: #if provided, a 10X QC box plot will be ploted in QC plot rasterizeFig: True # should image in pdf be rasterized runAnalysis: True newProcess: False parallel: False #&quot;sge&quot; or &quot;slurm&quot; core: 2 overwrite: True major_cluster_rate: 0.7 # the proportion of cells of an integration cluster to be assigned to a seurat reference label ## DEG analysis for an annotation (such as disease vs health) within a cell type annotation DEG_desp: ~/E-MTAB-11115/DEGinfo.csv #required for DEG analysis, but you can leave this empty if not going to run DEG # Please be causion of changing the following default filtering # More details can be found: section 2.4 in https://pubmed.ncbi.nlm.nih.gov/35743881/ # Applies the 1st round of biostats filtering pipeline. Note that this filter is applied to all cells of the experiment min.cells.per.gene: 3 # if `perc_filter` is FALSE, then keep only genes that have expression in at least min.cells.per.gene min.genes.per.cell: 250 # keep cells with expression in at least min.genes.per.cell genes. min.perc.cells.per.gene: 0.00 #if &#39;perc_filter&#39;`&#39; is TRUE, then keep only genes that have expression in at least min.per.cells.per.gene * 100 percent of cells perc_filter: TRUE # if TRUE, apply the cells.per.gene filter using percentages (expressed as a decimal) rather than an absolute threshold # Apply the 2nd round of biostats filtering. For &quot;group&quot; mode, the filtering is applied to `ref_group` and `alt_group` for the given cell type of interest. R6_min.cells.per.gene: 3 # minimum cells expressed per gene. This filter is applied if `R6_perc.cells.filter` is FALSE R6_min.perc.cells.per.gene: 0.1 # minimum % cells expressed per gene filtering (use decimal form of percentage). This threshold is applied if &#39;R6_perc.cells.filter&#39; is TRUE and &#39;R6_cells.per.gene.filter&#39; is TRUE R6_min.cells.per.gene.type: &quot;or&quot; # The type of cell per gene filtering. If it has the value &quot;and&quot; then it requires the gene be expressed in both reference and non-reference groups. If it has the value &quot;or&quot; then it requires the gene be expressed in either group R6_cells.per.gene.filter: TRUE # TRUE means apply cells per gene filtering R6_perc.cells.filter: TRUE # TRUE means apply cell.per.gene filtering by use of a percentage rather than absolute threshold. If the percentage results in a number less than R6_min.cells.per.gene, the code will automatically switch to min.cells.per.gene absolute thresholding R6_perc.filter: FALSE # If TRUE, then apply the 75th percentile gene filtering R6_perc.filter.type: &quot;and&quot; # The type of percentile gene filtering. If it has the value &quot;and&quot; then any gene that has 75th percentile of zero in both groups will be filtered out. If it has the value &quot;or&quot; then any gene that has a 75th percentile of zero in either group will be filtered out. R6_perc_threshold: 0.90 # Percentile threshold, 75th percentile is default. Express percentile as a decimal value. R6_min.ave.pseudo.bulk.cpm: 1 #cpm filtering threshold R6_pseudo.bulk.cpm.filter: FALSE # if TRUE, then apply a cpm filter on the pseudo-bulk counts R6_min.cells.per.subj: 3 # Minimum cells required per subject, must be a nonzero number ## publish to celldepot publish: False In the first run (see the below scAnalyzer section on how to run the pipeline), the user can set runAnalysis: False and use the above default parameters to perform cell filtering and QC. Then this pipeline will only run basic QC checking and output a Bookdown report with QC figures. This step is semi-automated because different datasets may need distinct filtering criteria. The design of this pipeline is to pause here to make sure the filtering step is adequate before running through the whole analysis. Once the filtering step is validated by checking the QC report, the user can change the following settings and run the full analysis: runAnalysis: True overwrite: True 5.2 Prepare the sample meta file The sample meta file, usually named as sampleMeta.csv, is a csv file storing data information. The minimal columns for this file are Sample_Name (This name can be changed, but it must be consistent with the sample_name in the config.yml file) and h5path. If you have the cell type annotation information, you can provide is by adding a column called metapath. For other information, you can add as many columns in this csv file and the column names can be defined by yourself. 5.2.1 h5 input Here is an example with minimal information for the public dataset E-MTAB-11115 (10X h5 format): Sample_Name,h5path 5705STDY8058280,~/E-MTAB-11115/data/5705STDY8058280.filtered_feature_bc_matrix.h5 5705STDY8058281,~/E-MTAB-11115/data/5705STDY8058281.filtered_feature_bc_matrix.h5 5705STDY8058282,~/E-MTAB-11115/data/5705STDY8058282.filtered_feature_bc_matrix.h5 5705STDY8058283,~/E-MTAB-11115/data/5705STDY8058283.filtered_feature_bc_matrix.h5 5705STDY8058284,~/E-MTAB-11115/data/5705STDY8058284.filtered_feature_bc_matrix.h5 5705STDY8058285,~/E-MTAB-11115/data/5705STDY8058285.filtered_feature_bc_matrix.h5 Another example if you would like to use the cell type annotation defined by their analysis, which can be included in the metapath column. Moreover, the user has the freedom to provide further information such as sex and age: Sample_Name,h5path,metapath,sex,age 5705STDY8058280,~/E-MTAB-11115/data/5705STDY8058280_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058280_annotation.csv,Female,56d 5705STDY8058281,~/E-MTAB-11115/data/5705STDY8058281_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058281_annotation.csv,Female,56d 5705STDY8058282,~/E-MTAB-11115/data/5705STDY8058282_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058282_annotation.csv,Female,56d 5705STDY8058283,~/E-MTAB-11115/data/5705STDY8058283_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058283_annotation.csv,Male,56d 5705STDY8058284,~/E-MTAB-11115/data/5705STDY8058284_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058284_annotation.csv,Male,56d 5705STDY8058285,~/E-MTAB-11115/data/5705STDY8058285_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058285_annotation.csv,Male,56d 5.2.2 MEX input Since each data has three MEX files (barcodes.tsv.gz, features.tsv.gz and matrix.mtx.gz), here we provide the path to each MEX result directory. The minimal information in the sample meta file: Sample_Name,h5path miR155cKO_rep1,~/10XGenomicsData/GSM6213399_IT_YZ_0309_2904 WT_rep1,~/10XGenomicsData/GSM6213400_IT_YZ_0309_2905 WT_rep2,~/10XGenomicsData/GSM6213401_IT_YZ_0309_2908 miR155cKO_rep2,~/10XGenomicsData/GSM6213402_IT_YZ_0322_3125 Another example with additional information: Sample_Name,h5path,Genotype,Sex miR155cKO_rep1,~/10XGenomicsData/GSM6213399_IT_YZ_0309_2904,miR155cKO,Female WT_rep1,~/10XGenomicsData/GSM6213400_IT_YZ_0309_2905,WT,Female WT_rep2,~/10XGenomicsData/GSM6213401_IT_YZ_0309_2908,WT,Female miR155cKO_rep2,~/10XGenomicsData/GSM6213402_IT_YZ_0322_3125,miR155cKO,Female 5.3 File hierarchy Before running the pipeline, please check the file hierarchy. Here are examples for h5 and MEX inputs, and we suggest creating a separate folder (such as processing) to store the config.yml and sampleMeta.csv files. The output files will be generated in the directory specified in config.yml. For data downloaded in 10X h5 format: E-MTAB-11115/ ├── data ├── 5705STDY8058280.annotation.csv (optional) ├── 5705STDY8058280.metrics_summary.csv (optional) ├── 5705STDY8058280.raw_feature_bc_matrix.h5 ├── 5705STDY8058281.annotation.csv (optional) ├── 5705STDY8058281.metrics_summary.csv (optional) ├── 5705STDY8058281.raw_feature_bc_matrix.h5 ... ├── processing ├── config.yml └── sampleMeta.csv For data downloaded in 10X MEX format: GSE205483/ ├── GSM6213399_IT_YZ_0309_2904 ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── GSM6213400_IT_YZ_0309_2905 ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ... ├── processing ├── config.yml └── sampleMeta.csv "],["running-the-pipeline.html", "Chapter 6 Running the pipeline 6.1 Initial scAnalyzer run 6.2 Review the bookdown report 6.3 Generate a slide deck 6.4 Run the full analysis 6.5 Visualize the harmonized results", " Chapter 6 Running the pipeline After preparing the input data and configuration files (config.yml and sampleMeta.csv), we are ready to run the pipeline. Please be aware that scRNASequest is a semi-automated pipeline, and certain steps require the user to review the outputs and determine the parameters. Thus, the same step may need to be run for more than once. 6.1 Initial scAnalyzer run The initial scAnalyzer run intends to test the default filtering parameters on the single-cell RNA-seq data. We suggest the following settings in the config.yml file to activate the filtering step, but pause the pipeline from additional analysis (such as data integration, harmonization, etc.): # Change the following settings in the config.yml file: filter_step: True runAnalysis: False To run scAnalyzer, simply pass the path to the config.yml file to the program: scAnalyzer Path/to/a/config/file #Example: scAnalyzer ~/E-MTAB-11115/processing/config.yml Output files: outputdir ├── BookdownReport/ #Full bookdown report folder. This is same as the BookdownReport.tar.gz below ├── config.yml ├── config.yml.20220617.log #log file ├── ProjName_BookdownReport.tar.gz #Bookdown report tar ball. #Please download this file and open the index.html file to view the report ├── ProjName_raw_prefilter.h5ad #h5ad after pre-filtering ├── prefilter.QC.pdf #QC plots before filtering. These plots are included in the Bookdown report ├── postfilter.QC.pdf #QC plots after filtering └── Rmarkdown/ #Source files for the Bookdown report 6.2 Review the bookdown report After the initial scAnalyzer run, a bookdown report, named ProjName_BookdownReport.tar.gz will be generated. Please open the report (index.html) to review cell numbers and figures before and after the filtering step, and adjust the following thresholds in the config.yml file if needed: # Cell filtering parameters in the config.yml file: gene_group: MT: startwith: [&quot;MT-&quot;,&quot;Mt-&quot;,&quot;mt-&quot;] cutoff: 20 #percentage cutoff to filter out the cells (larger than this cutoff) rm: False RP: #for ribosomal genes if you would like to filter them startwith: [] cutoff: 20 rm: False filter_step: True #if False, the above &#39;gene_group&#39; filtering will be skipped as well min.cells: 3 #filtering genes by minimum number of cells with non-zero count for a gene min.features: 50 #filtering cells by minimal genes detected highCount.cutoff: 10000 #any cells with higher total counts to be removed highGene.cutoff: 3000 #any cells with a higher number of detected genes to be removed The min.cells cutoff is to filter out genes that have low representation in cells, and the min.features cutoff is to filter out cells that have low number of genes (features) detected. The last two cutoffs, highCount.cutoff and highGene.cutoff can be used to filter cells if they have too many total counts or UMI detected, possibly due to multiplets. The user may need to adjust the thresholds and rerun scAnalyzer to visualize the results. This step may be repeated until the threshold is adequate for the data. Please find an example of the bookdown report here: E-MTAB-11115 bookdown 6.3 Generate a slide deck The QC report can be turned into a online slide deck format for better sharing and demonstration. To achieve this, please use the Slidedeck.Rmd file under the /src folder and follow the steps below: # create a new directory inside the project, and link the existed files and folder: cd ~/E-MTAB-11115/processing/ mkdir Slidedeck &amp;&amp; cd Slidedeck ln -s ../BookdownReport/images ln -s ../BookdownReport/bookdown.info.txt # Copy the Slidedeck.Rmd file from src directory to the working directory containing config.yml file cp ~/scRNAsequest/src/Slidedeck.Rmd ~/E-MTAB-11115/processing/Slidedeck # Source the environment src=&quot;~/scRNAsequest/src/.env&quot; source $src/.env;eval $condaEnv # Run the Slidedeck script, and set the output file name using &#39;output_file&#39; parameter Rscript -e &#39;rmarkdown::render(&quot;Slidedeck.Rmd&quot;, output_file=&quot;Output.html&quot;)&#39; Please download the whole Slidedeck and open the Output.html file in a web browser. Please find an example of the bookdown report here: E-MTAB-11115 slidedeck 6.4 Run the full analysis After the filtering step is done, we are ready to turn on the runAnalysis parameter and run the full pipeline: # Change the following setting in the config.yml file: runAnalysis: True overwrite: True #Overwrite the previous results if we run this again, for example, after adjusting some parameters. Please also pay attention to the reference data, and if the user would like to turn on the label transfer function for cell type annotation, set the following parameter, for example, using mouse_spinalCord as the reference: ref_name: mouse_spinalCord To check all available references, run scAnalyzer without any parameter. To add new references, please see section 8: Reference Building. Then run the following command again: scAnalyzer Path/to/a/config/file #Example: scAnalyzer ~/E-MTAB-11115/processing/config.yml This step will be time-consuming, and it took ~1 hour for the E-MTAB-11115 data (final cell number: 29511) to finish. For a larger dataset, such as GSE205483 (final cell number: 111,011), the full pipeline took ~7 hours. 6.5 Visualize the harmonized results After running the pipeline, you will see the following files in the working directory. Each harmonization method (Harmony, Seurat, Liger) will also generate corresponding files. outputdir # Input files ├── config.yml: The analysis config file specify the scAnalyzer parameters ├── sampleMeta.csv: List all sample information including expression matrix (and sample/cell level meta information) └── DEGinfo.csv: Define the sc DEG (between phenotypes within a cluster annotatino) # Log files: ├── config.yml.[date].log: All stdout/stderr will be recorded in this dated log file └── [Software].error Standard error files of multiple software, including: Harmony, Liger, SeuratRPCA, SeuratRef, SCT, sctHarmony, silhouette, # QC files: ├── sequencingQC.csv: Merged all sequence QC files from individual samples if available ├── sequencingQC.pdf: Plots of sequence QC if they are available ├── prefilter.QC.pdf: Initial data QC plots without filtering └── postfilter.QC.pdf: Data QC plots after filtering # Initial files: ├── [prj_name]_raw_prefilter.h5ad: The internal temporary raw counts created/merged directly from sample before filtering └── [prj_name]_raw.h5ad: The internal temporary raw counts after the cell/gene filtering # SCT: ├── [prj_name]_SCT.h5: The sparse matrix contains SCT expression values ├── [prj_name]_SCT.h5.rds: The Seurat object contains counts (RNA assay) and SCT expression (SCT assay) along with original meta information from SampleMeta file └── [prj_name]_SCT.h5ad: The SCT expression, along with PCA, tSNE, UMAP reduction layout, will be merged into [prj_name].h5ad # Seurat_integration: ├── [prj_name]_seurat_r2py_integrated.csv.gz: Expression matrix from seurat integration assay of data entry ├── [prj_name]_seurat_r2py_integrated.genes.csv.gz: Variable genes from integration assay └── [prj_name]_Seurat.h5ad: The seurat integration with reduction embedding and clustering, will be merged into [prj_name].h5ad # Seurat_RPCA_integration: ├── [prj_name]_seurat_rpca.csv.gz: The reuction embedding and clustering results from seurat RPCA integration └── [prj_name]_SeuratRPCA.h5ad: The seurat RPCA integration with reduction embedding and clustering, will be merged into [prj_name].h5ad # Seurat_refMapping: ├── [prj_name]_seuratRef.csv: The reuction embedding and label transfer results from seurat RPCA integration └── [prj_name]_SeuratRef.h5ad: The seurat reference mapping results with reduction embedding, will be merged into [prj_name].h5ad # Harmony: ├── [prj_name]_harmony_py2r_batch.Rdata: The library/batch information of each cell ├── [prj_name]_harmony_py2r_pca.Rdata: The PCA of each cell ├── [prj_name]_harmony_r2py.Rdata: The harmony PCA results └── [prj_name]_Harmony.h5ad: The harmony integration with reduction embedding and clustering, will be merged into [prj_name].h5ad # Liger: ├── [prj_name]_liger_hvg.csv: High variable gene list ├── [prj_name]_liger.csv&quot;: The liger integration embedding and cluster └── [prj_name]_Liger.h5ad&quot;: The liger integration with reduction embedding and clustering, will be merged into [prj_name].h5ad # scDEG (if you ran the DEG step): ├── [prj_name]_scDEG.cmd.json: The scDEG cmd jobs, if scDEG jobs defined in DEGinfo.csv are available ├── [prj_name]_scDEG&quot;: The folder contains all scDEG jobs, each sub folder contains scDEG csv files from one entry in DEGinfo.csv └── [comparison].error Standard error files for all comparison groups # Other output: ├── [prj_name].h5ad: The final h5ad file which is used for cellxgene VIP load (will be copied into celldepot folder) ├── [prj_name].db: The final h5ad file which is used for cellxgene VIP load (will be copied into celldepot folder) └── [prj_name]_raw_added.h5ad: The h5ad file contains raw counts in X along with all annotation and embeding (will be copied into celldepot folder) ├── [prj_name]_kBET_umap_k0_100.pdf&quot;: The kBET evaluation plot for all integration methods └── [prj_name]_Silhouette_boxplot_pc50.pdf&quot;: The Silhouette evaluation plot for all integration methods # Rbookdown: ├── Rmarkdown: The folder contains png files for R bookdown ├── [prj_name]_BookdownReport.tar.gz: R bookdown document tarball for downloading and sharing └── BookdownReport: The folder contains R bookdown reports # Parallel directory (if you ran the pipeline in parallel mode): └── j[numeric]: A colder contains parallel jobs submit script and log file kBET is a useful metric to evaluate and compare the harmonization results. Here is an example of the ProjName_kBET_umap_k0_100.pdf result: Please review the ProjName.h5ad file for the harmonization result. If you have Cellxgene VIP installed, the visualization will be easier. Here is an example of the ProjName.h5ad project visualized by Cellxgene VIP: "],["differential-expression-de-analysis.html", "Chapter 7 Differential expression (DE) analysis 7.1 Example 1 7.2 Example 2", " Chapter 7 Differential expression (DE) analysis Another critical function of the scRNASequest pipeline is the Differential expression (DE) analysis. By running the steps in Section 6: Running the pipeline, we have performed quality control of the data, and generated an integrated dataset. Before running the DE analysis, the DEGinfo.csv comparison file needs to be prepared: In the DEG comparison file above, “sample”, “cluster”, “group” and “covars” are the annotation headers, and “alt” and “ref” are the two entries from “group” column. The “covars” is optional and can be empty. The DEG is performing between “alt” and “ref” cells from “group” within each entry of “cluster” considering “sample” variations. The “group” variable should contain conditions to compare, such as Mutant v.s. Control. Thus, this pipeline is designed to loop through each cluster, and perform DEG analysis between “alt” v.s. “ref”. Here, this tutorial provides several examples to illustrate the DE analysis in scRNASequest: We use a UMAP with label transferred cell type annotation as an example dataset. Label transfer is strongly suggested if you would like to run DE analysis because the clusters are more meaningful than the original clusters assigned by the software: 7.1 Example 1 In the first example, we would like to run DE analysis between ‘Female’ and ‘Male’ for each cluster annotated by predicted.celltype1. In the first column, we input the header name library_id, which annotates the data sources. Then we add predicted.celltype1 in the cluster column, which allows the pipeline to loop through each cluster in predicted.celltype1. The group column contains the header name storing the comparison groups, and here we use the Sex annotation. Each time, the pipeline can only compare two conditions, such as ‘Female’ and ‘Male’. If the group column contains more groups, please list them in multiple lines in the DEGinfo.csv file. We can also add covars if needed, but this is optional. The default DE analysis is performed by NEBULA. As for the model, NEBULA provides two choices: HL and LN. For more details about them, please refer to the NEBULA manual. Here is the DEGinfo.csv we described above: sample,cluster,group,alt,ref,covars[+ separated],method[default NEBULA],model[default HL] library_id,predicted.celltype1,Sex,Female,Male,,NEBULA,HL After preparing the DEGinfo.csv file, simply add it to the config.yml file: DEG_desp: ~/E-MTAB-11115/processing/DEGinfo.csv Then rerun the pipeline. The pipeline won’t run the previous steps (i.e. filtering, harmonization, etc.) again, so it will directly run the DE analysis based on the harmonized h5ad file. scAnalyzer Path/to/a/config/file #Example: scAnalyzer ~/E-MTAB-11115/processing/config.yml This step may take a few hours to run. The output files will be generated in the directory: outputdir ... previous results #Omitted, see section 6.4 ├── ProjName_scDEG #Folder containing DEG results ├── deg6601_predicted.celltype1_Sex_NEBULA_HL ├── Female.vs.Male_predicted.celltype1:astrocytes_NEBULA.csv #Each comparison has three associated files ├── Female.vs.Male_predicted.celltype1:astrocytes_NEBULA.png ├── Female.vs.Male_predicted.celltype1:astrocytes_NEBULA.QC.pdf ├── Female.vs.Male_predicted.celltype1:discarded_NEBULA.csv ├── Female.vs.Male_predicted.celltype1:discarded_NEBULA.png ├── Female.vs.Male_predicted.celltype1:discarded_NEBULA.QC.pdf ... ├── env.rds ├── ProjName_scDEG.cmd.json ├── deg6601_predicted.celltype1_Sex_NEBULA_HL_astrocytes_Female_Male.error #Standard error messages ├── deg6601_predicted.celltype1_Sex_NEBULA_HL_meninges_schwann_Female_Male.error ├── deg6601_predicted.celltype1_Sex_NEBULA_HL_microglia_Female_Male.error ├── deg6601_predicted.celltype1_Sex_NEBULA_HL_discarded_Female_Male.error ├── deg6601_predicted.celltype1_Sex_NEBULA_HL_endo_vascular_Female_Male.error ├── deg6601_predicted.celltype1_Sex_NEBULA_HL_neurons_Female_Male.error ├── deg6601_predicted.celltype1_Sex_NEBULA_HL_OPC_Female_Male.error └── ProjName_scDEG.db An example of the DE csv table (Female.vs.Male_predicted.celltype1/astrocytes_NEBULA.csv, top 5 rows): In the table below, the most significant gene is Xist, a well-known X-chromosome gene highly expressed in female. Table 7.1: DEG analysis of Female.vs.Male in astrocytes res.tab.ID res.tab.log2FC res.tab.Pvalue res.tab.FDR res.tab.algorithm res.tab.convergence res.tab.metric res.ls.summary.logFC_.Intercept. res.ls.summary.logFC_.GrouPalt res.ls.summary.se_.Intercept. res.ls.summary.se_.GrouPalt res.ls.summary.p_.Intercept. res.ls.summary.p_.GrouPalt res.ls.summary.gene_id res.ls.summary.gene res.ls.overdispersion.Subject res.ls.overdispersion.Cell res.ls.convergence res.ls.algorithm Xist 9.676171 0 0 HL 1 6115.1780 -6.693213 0.1276737 0.0234622 0.0469395 0 0.0065289 1 Rgs20 0.0016728 0.4393152 1 NBGMM (HL) Pnpla7 -1.230034 0 0 HL 1 1653.1553 -9.321192 -0.1694550 0.0534180 0.1065177 0 0.1116405 2 Atp6v1h 0.0064320 0.3327316 1 NBGMM (HL) Etnppl -1.592058 0 0 HL 1 525.8328 -8.511808 0.0917939 0.0282832 0.0565059 0 0.1042691 3 Rb1cc1 0.0001000 0.1725113 1 NBGMM (HL) Zbtb16 -1.448309 0 0 HL 1 1260.9518 -9.896064 -0.0918014 0.0584728 0.1165549 0 0.4309170 4 4732440D04Rik 0.0014745 0.7288504 1 NBGMM (HL) Sorcs2 1.137956 0 0 HL 1 1398.0881 -8.573613 -0.2252848 0.0303869 0.0604625 0 0.0001945 5 Pcmtd1 0.0001000 0.3502587 -10 NBGMM (HL) An example of the DE png file (Female.vs.Male_predicted.celltype1/astrocytes_NEBULA.png): 7.2 Example 2 In the second example, we are going to show how to perform DE analysis between two cell types. To achieve this, we added one artificial column (called ‘SelectAll’) in the sampleMeta.csv file, and assigned the same values (‘Everything’) to all the data: Sample_Name,h5path,Sex,SelectAll 5705STDY8058280,/home/ysun4/testSinglecell/ExternalData/5705STDY8058280_filtered_feature_bc_matrix.h5,Female,Everything 5705STDY8058281,/home/ysun4/testSinglecell/ExternalData/5705STDY8058281_filtered_feature_bc_matrix.h5,Female,Everything 5705STDY8058282,/home/ysun4/testSinglecell/ExternalData/5705STDY8058282_filtered_feature_bc_matrix.h5,Female,Everything 5705STDY8058283,/home/ysun4/testSinglecell/ExternalData/5705STDY8058283_filtered_feature_bc_matrix.h5,Male,Everything 5705STDY8058284,/home/ysun4/testSinglecell/ExternalData/5705STDY8058284_filtered_feature_bc_matrix.h5,Male,Everything 5705STDY8058285,/home/ysun4/testSinglecell/ExternalData/5705STDY8058285_filtered_feature_bc_matrix.h5,Male,Everything Then we prepare the DEGinfo.csv file in this way. The ‘SelectAll’ was filled into the cluster column, and since it only has one value, it actually selects all cells when running the pipeline. Then it performs astrocytes to Oligos comparison. sample,cluster,group,alt,ref,covars[+ separated],method[default NEBULA],model[default HL] library_id,SelectAll,predicted.celltype1,astrocytes,Oligos,,NEBULA,HL Then we need to run the scRNASequest pipeline from the beginning, which allows the ‘SelectAll’ column to be embedded into the harmonized h5ad output. As long as we have DEGinfo.csv included in the config.yml, it will run through the DE analysis and produce the following results: outputdir ... previous results #Omitted, see section 6.4 ├── ProjName_scDEG #Folder containing DEG results ├── deg6602_SelectAll_predicted.celltype1_NEBULA_HL ├── astrocytes.vs.Oligos_SelectAll:Everything_NEBULA.csv #Each comparison has three associated files ├── astrocytes.vs.Oligos_SelectAll:Everything_NEBULA.png ├── astrocytes.vs.Oligos_SelectAll:Everything_NEBULA.QC.pdf ├── env.rds ├── ProjName_scDEG.cmd.json ├── deg6602_SelectAll_predicted.celltype1_NEBULA_HL_Everything_astrocytes_Oligos.error #Standard error messages └── ProjName_scDEG.db An example of the DE csv table (astrocytes.vs.Oligos_SelectAll:Everything_NEBULA.csv, top 5 rows): Table 7.2: DEG analysis of astrocytes.vs.Oligos res.tab.ID res.tab.log2FC res.tab.Pvalue res.tab.FDR res.tab.algorithm res.tab.convergence res.tab.metric res.ls.summary.logFC_.Intercept. res.ls.summary.logFC_.GrouPalt res.ls.summary.se_.Intercept. res.ls.summary.se_.GrouPalt res.ls.summary.p_.Intercept. res.ls.summary.p_.GrouPalt res.ls.summary.gene_id res.ls.summary.gene res.ls.overdispersion.Subject res.ls.overdispersion.Cell res.ls.convergence res.ls.algorithm Xkr4 -3.327923 0 0 HL 1 4177.156 -8.168075 -2.3067403 0.0367924 0.0561022 0 0.0000000 1 Xkr4 0.0067297 0.6076303 1 NBGMM (HL) Rgs20 6.386205 0 0 HL 1 5561.771 -9.825703 -2.5066029 0.0890548 0.1353916 0 0.0000000 2 Gm1992 0.0398103 1.4947561 1 NBGMM (HL) St18 -5.129500 0 0 HL 1 14283.487 -10.322696 0.2176484 0.0310922 0.0690489 0 0.0016211 3 Mrpl15 0.0001000 0.4188721 1 NBGMM (HL) Adhfe1 4.842192 0 0 HL 1 12162.136 -10.169996 0.1119117 0.0292679 0.0669762 0 0.0947381 4 Tcea1 0.0001000 0.7212448 1 NBGMM (HL) Prex2 8.368190 0 0 HL 1 8249.837 -10.292221 4.4265797 0.0513462 0.0563860 0 0.0000000 5 Rgs20 0.0047768 0.4563594 1 NBGMM (HL) An example of the DE png file (astrocytes.vs.Oligos_SelectAll:Everything_NEBULA.png): "],["reference-building.html", "Chapter 8 Reference building 8.1 Initialize scRef 8.2 Submit scRef", " Chapter 8 Reference building Reference building is critical for label transfer. To add a reference dataset into the scRNASequest pipeline, the reference matrix needs to be SCT transformed. By running the following command, we can see the manual page of the reference generator, scRef: $ scRef ***** 2022-06-23 17:38:28 ***** ########### ## scRNAsequest: https://github.com/interactivereport/scRNAsequest.git ## Pipeline Path: /camhpc/ngs/tools/scRNAsequest ## Pipeline Date: 2022-06-23 15:00:23 -0400 ## git HEAD: 61d9e676d31849ccc8ac8a3442704128504be248 ########### Loading resources scRef /path/to/a/output/folder === or === scRef /path/to/a/Ref/config/file The folder has to be existed. The Ref config file will be generated automatically when a path is provided ===== CAUTION ===== 1. This process will add a seurat reference data into the scRNAsequest pipeline PERMANENTLY! 2. Make sure the data provided for reference building is SCT transformed! Powered by the Research Data Sciences group [zhengyu.ouyang@biogen.com;kejie.li@biogen.com] ------------ 8.1 Initialize scRef This pipeline can be initialized using an empty directory. for example, we first create a directory called ‘Reference_data’, then initiate the pipeline pointing to this directory: scRef /path/to/the/directory #Example: scRef ~/Reference_data After the run, a config file, refConfig.yml, and a log file will be generated in the directory. The refConfig.yml is a template of the following scRef run, passing critical parameters to the pipeline. The refConfig.yml file will be same as this template, but the output directory will be yours. Here is an example after filling in the configuration file: output: ~/Reference_data # the following is normally located in the same folder of celldepot hosting h5ad files ref_h5ad_raw: /path/to/ProjectName_raw_added.h5ad # full path to the h5ad file contains raw UMI along with cell annotation and layout ref_batch: library_id # above two parameters are ignored, if a seurat object can be located in the project folder ref_rds: # full path to the processed seurat object including SCT assay, cell annotation and layout # All information below are required ref_name: Reference_data # Please provide a unique name prefer to include species and tissue (check existed by calling scAnalyzer without argument) ref_link: # The web link to the information of this reference. For scAnalyzer processed data, you could provide a Cellxgene VIP link here. ref_src: sn # sc/&quot;single cell&quot; or sn/&quot;single nuclei&quot; ref_platform: 10X # Single cell/neuclei technology e.g. 10X, SNARE-seq2, dropSeq, ... #list a reduction to be used (at least 50 dimensions full name from VIP or one from seurat &#39;reductions&#39; ) # details: https://github.com/satijalab/azimuth/wiki/Azimuth-Reference-Format # this reduction is NOT directly used, but used to find the neighbors which is then used for computing sPCA reduction which is used in the reference # For instance, if harmony was prefered layout then providing either &#39;harmony&#39; (50 dimention) or &#39;harmony-PCA&#39; ref_reduction: pca ref_label: [predicted.celltype1] # List the annotations (case sensitive) to be used for transferring. Please check this in the data. For our case, the header is called &#39;predicted.celltype1&#39; # The cell type label/header name you would like to transfer publish: False # Should this reference be published (added permanently) into scAnalyzer overwrite: False # Overwrite the existing scAnalyzer reference For the input data, scRef can take either a h5ad file containing raw UMI and annotatino information, or an R data file in rds format. If you have finished running a dataset using scAnalyzer, then you can directly use the Filename_raw_added.h5ad (not Filename_raw.h5ad file) as input, and attach its path to ref_h5ad_raw. Alternatively, you can provide an RDS file using ref_rds. Either providing ref_h5ad_raw or ref_rds would be sufficient to the pipeline. The ref_label is critical for label transfer if you would like to use this data as a reference in the future. It tells the program to use the cell type information in these (can be one more more) headers to perform label transfer. For a h5ad data, the easiest way is to open it using Cellxgene VIP, and identify the header that contains cell type labels, e.g. predicted.celltype1 in our case. For an RDS data, you could read it in R using the readRDS function and identify the column names containing cell type annotation. 8.2 Submit scRef After filling in the information in the refConfig.yml file, we are ready to submit the full pipeline and build the reference data for label transfer: scRef /path/to/a/Ref/config/file #Example: scRef ~/Reference_data/refConfig.yml Output files: Reference_data ├── init_20220630.log ├── refConfig.yml ├── refConfig.yml.20220630.log # Output log information ├── Reference_data_for_scAnalyzer.rds # The data to use for label transfer and downstream analysis ├── ref_notFor_scAnalyzer.rds # Output rds file NOT for lebel transfer ... Please also check the information in the refConfig.yml.20220630.log file, and pay attention to the last few lines: ... #log of the running process omitted The private reference could be used by provide the following full path to &#39;ref_name&#39; in scAnalyzer config file: ~/Reference_data/Reference_data_for_scAnalyzer.rds ... This indicates that the reference has been successfully generated, and it can be passed to scAnalyzer through the config.yml file. If you turned on “publish: True” in the refConfig.yml, this reference will be added to scAnalyzer, and you can use its name to refer it when running scAnalyzer. "],["celldepot-publishing.html", "Chapter 9 CellDepot publishing 9.1 Initialize sc2celldepot 9.2 Publish to CellDepot", " Chapter 9 CellDepot publishing CellDepot is a comprehensive data management platform for single-cell RNA-seq datasets. Publishing to CellDepot allows easy navigation and visualization of the data, and facilitates big data deposition. Thus, scRNASequest pipeline offers a function to publish a dataset to CellDepot using sc2celldepot. This workflow will use the existing cell type labels and create h5ad and RDS that are compatible with the CellDepot platform. If you are interested in hosting any public datasets withour re-analyzing it using the full scRNAsequest pipeline (e.g. filtering, harmonization, DE analysis), you can easily run sc2celldepot to convert and publish it on CellDepot. By running the following command, we can see the manual page of the script: $ sc2celldepot ***** 2022-07-07 11:10:44 ***** ########### ## ExpressionAnalysis: https://github.com/interactivereport/scRNAsequest.git ## Pipeline Path: /camhpc/ngs/tools/scRNAsequest ## Pipeline Date: 2022-07-06 17:43:20 -0400 ## git HEAD: c9f0ba5e860c269fb632bee22ef312371e0e3143 ########### Loading resources sc2celldepot /path/to/a/output/folder === or === sc2celldepot /path/to/a/config/file The folder will be created if it does not exist. The data config file will be generated automatically when a path is provided Powered by the Research Data Sciences Group [zhengyu.ouyang@biogen.com;yuhenry.sun@biogen.com] ------------ 9.1 Initialize sc2celldepot Running sc2celldepot by providing a working directory will initiate the project and generate a template of config file. The config file template can be found: template. First, we create a new directory under the project. Then we run the sc2celldepot command: mkdir ~/E-MTAB-11115/CellDepot_publish sc2celldepot ~/E-MTAB-11115/CellDepot_publish E-MTAB-11115/ ├── data ├── 5705STDY8058280.annotation.csv (optional) ├── 5705STDY8058280.metrics_summary.csv (optional) ├── 5705STDY8058280.raw_feature_bc_matrix.h5 ... ├── processing ├── config.yml ... └── CellDepot_publish └── sc2celldepot.yml Here is an example after filling in the configuration sc2celldepot.yml file: ## The config file to process public sc/sn RNAseq and generate h5ad for celldepot output: ~/E-MTAB-11115/CellDepot_publish prefix: E-MTAB-11115 # the prefix of the file name of the h5ad # seurat RDS is avaiable, otherwise please move to next section seuratObj: # the full path to the seurat RDS file with SCT &amp; RNA assay along with meta.data and reduction seuratUMI: RNA # the name of the assay stores raw UMI seuratSCT: SCT # the name of the assay stores SCT seuratMeta: [] # the list of cell annotations to be stored in h5ad, empty list means all meta.data entry from seurat rds # Expression when the seurat RDS is not available (row gene/column cell) # if the annotation files are seperated the same as expression files, they should be the same order, other wise cell ID will be used to match expression: [~/E-MTAB-11115/data/5705STDY8058280_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058281_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058282_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058283_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058284_filtered_feature_bc_matrix.h5,~/E-MTAB-11115/data/5705STDY8058285_filtered_feature_bc_matrix.h5] # full path the gene expression file/folder (h5/csv/txt/mtx), if multiple files, please provide the list separated by &#39;,&#39; dataUMI: True # if the above expression is UMI, if the value in expression file should be used directly, please set &quot;False&quot; # cell annotation (cell intersection will be used, first column is the cell ID) annotation: [~/E-MTAB-11115/data/5705STDY8058280_annotation.csv,~/E-MTAB-11115/data/5705STDY8058281_annotation.csv,~/E-MTAB-11115/data/5705STDY8058282_annotation.csv,~/E-MTAB-11115/data/5705STDY8058283_annotation.csv,~/E-MTAB-11115/data/5705STDY8058284_annotation.csv,~/E-MTAB-11115/data/5705STDY8058285_annotation.csv] # full path to the cell annotation file, first column is the cell ID which should match cell ID in expression annotationUse: [] # the column names in the annotation file to be extracted for h5ad, empty list means all columns sample_column: # one column header from annotation file, if the one expression file needs to be splited into each sample # cell layout: tSNE, UMAP, PCA, if separated the same as expression files, should be the same order reduction: # key &#39;files&#39; required but other keys can be removed or added new ones, keys will be used in h5ad files: [] # full path to the cell layout file (contains all layouts of a set of cells), first column is the cell ID which should match cell ID in expression umap: [] # column headers from layout file to be used tsne: [] # column headers from layout file to be used pca: [] # column headers from layout file to be used (can be more than 2 dimentions though only first two will be shown in VIP) The expression and annotation information are critical to create the project. 9.2 Publish to CellDepot After preparing the sc2celldepot.yml file, we are ready to run the pipeline by the following command: sc2celldepot ~/E-MTAB-11115/CellDepot_publish/sc2celldepot.yml This workflow will generate the output files in the working directory, CellDepot_publish: The output prefix is determined by the prefix parameter in the sc2celldepot.yml file. E-MTAB-11115/ ├── data ... ├── processing ... └── CellDepot_publish ├── E-MTAB-11115.h5ad ├── E-MTAB-11115.raw_added.h5ad ├── E-MTAB-11115.rds └── sc2celldepot.yml Finally, copy the E-MTAB-11115.h5ad to the CellDepot folder and follow the instructions for publishing it. "],["additional-tools.html", "Chapter 10 Additional tools 10.1 Remove annotations 10.2 Add annotations 10.3 Export gene expressions", " Chapter 10 Additional tools We also provide scTool, a user-friendly toolkit for modifying the h5ad file. With scTool, the user can: Remove existing annotations in the data, such as the cell type annotation. Add cell type annotation by providing a two-column csv file, specifying the cell type category of each single cell. Export a list of genes along with all annotation. By running the scTool without providing any parameters, we can see the manual page of the script: $ scTool usage: scTool.py [-h] {rm,add,export} h5ad [changes] Additional sc tools. WARNING: The input h5ad files will be over-written! positional arguments: {rm,add,export} Modify the h5ad by either &quot;rm&quot;, &quot;add&quot; or &quot;export&quot; cell level annotations. h5ad Path to a h5ad file to be modified changes Options: 1. A list of annotaions to be removed (separated by &quot;,&quot;) 2. A path to a csv file contains cell level annotations (first column is the cell ID) 3. A list of genes (separated by &quot;,&quot;, empty or max 50) to be exported along with all annotations. optional arguments: -h, --help show this help message and exit Powered by the Research Data Sciences Group [zhengyu.ouyang@biogen.com;yuhenry.sun@biogen.com] ------------ We use this pubic E-MTAB-11115 data as an example: 10.1 Remove annotations To remove annotation, we can simply pass the annotation header names to the program, and it will remove these headers, and re-write the original file. Please back-up the original file first if you would like to keep a copy ot it. As an example, here we remove the following headers: predicted.celltype2 and predicted.location. scTool rm ProjName_raw_added.h5ad predicted.celltype2,predicted.location 10.2 Add annotations To provide a new annotation, the user needs to prepare a csv file containing cell barcode and new annotation names. For example, we use the following csv file to include a manual.curated.labels cell type labeling to the original data: $ head -2 manual.curated.labels.csv AAACCCAAGGAAGTAG-1-5705STDY8058280,neurons AAACCCAAGGGCAGTT-1-5705STDY8058280,Oligos #Run the scTool: scTool add ProjName_raw_added.h5ad manual.curated.labels.csv 10.3 Export gene expressions This function exports gene expression values of provided genes, along with all other annotations. This provides a flexible way to examine the expression values of a set of genes. scTool export ProjName_raw_added.h5ad App,Olig1,P2ry12 The output result is a .csv file: ProjName_raw_added.h5ad.csv. Here is an example of the output file: "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
